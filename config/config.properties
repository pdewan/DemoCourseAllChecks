# Case Matters (at least by default)
# The names here have to be consistent with the named constants in StaticConfigurationUtils

# Specify which assignment the grading is going to grade
# Provide the canonical name of the class that extends FrameworkProjectRequirements or implements ProjectRequirements
#
# The following classes are available for the COMP 401 (F13) assignments:
#   gradingTools.assignment1.Assignment1ProjectRequirements
#   gradingTools.assignment2.Assignment2ProjectRequirements
#   gradingTools.assignment3.Assignment3ProjectRequirements
#   gradingTools.assignment6.Assignment6ProjectRequirements
#   gradingTools.assignment7.Assignment7ProjectRequirements
#   gradingTools.assignment8.Assignment8ProjectRequirements
#   gradingTools.assignment9.Assignment9ProjectRequirements
#   gradingTools.assignment10.Assignment10ProjectRequirements
# For these, use AssignmentX as the project name.

#
# The following classes are available for the COMP 110 (S14) assignments
#   gradingTools.comp110.program0.Program0Requirements
#	gradingTools.comp110.assignment1.Assignment1Requirements
# For these, use ProgramX as the project name.
#project.requirements = gradingTools.comp110.assignment2.Assignment2Requirements
#do not hardwire project requirements as shown below, this is onlt for backwards compatibility
#project.name = Assignment2
#project.requirements = gradingTools.example.ExampleProjectRequirements
#project.name = Example
#
#alternative to explicit requiments spefication, used to extract course info from testcases
implicitRequirementsRoot = gradingTools
# syntax of the clsas that has the requirements
default.requirements = gradingTools.{modulename}.{problemname}.{problemName}Requirements
Comp401.requirements = gradingTools.{problemname}.{problemName}ProjectRequirements
Comp110f14.requirements = gradingTools.comp110f14.{problemname}.{problemName}Requirements
Comp110s15.requirements = gradingTools.comp110s15.{problemname}.{problemName}Requirements
Comp110f15.requirements = gradingTools.comp110f15.{problemname}.{problemName}Requirements
Comp790ColabInc.requirements = gradingTools.comp790ColabInc.{problemname}.{problemName}Requirements

Comp411.Assignment1.requirements = gradingTools.comp110.assignment1.Assignment1Requirements
Comp734.Assignment1.requirements = gradingTools.comp110.assignment1.Assignment1Requirements
Comp110Inc.Assignment1.requirements = gradingTools.comp110Inc.assignment1.IncrementalInputAssignment1Requirements
Comp734Inc.Assignment1.requirements = gradingTools.comp110Inc.assignment1.IncrementalInputAssignment1Requirements
Comp790Colab.Example1.requirements = gradingTools.comp790Colab.example1.Example1Requirements
Comp790Colab.Assignment1.requirements = gradingTools.comp790Colab.assignment1.Assignment1Requirements
Comp790ColabInc.Assignment1.requirements = gradingTools.comp790ColabInc.assignment1.Assignment1Requirements
#Comp110.Assignment3.forkMain = true
#Comp999JUnit.Assignment1.forkMain = false



#Comp734Multi.Assignment1.requirements = gradingTools.comp734Multi.assignment1.MultiInputAssignment1Requirements
#do not generate trace files by default

default.entryPoint = {problemName}
#syntax of execution command
#default.execution = java, -cp, {classPath},-Djava.security.manager,-Djava.security.policy={permissions}, {entryPoint}
default.execution = java, -cp, .{:}..{:}{classPath}{:}{oePath}{:}{junitPath}, {entryPoint}, {args}

Comp411.execution = {buildFolder}\\{entryPoint}
Comp411Interp.execution = {buildFolder}\\{entryPoint}
Comp790Colab.execution = java, -cp, {classPath},  {entryTags}, {args}
Comp790ColabInc.execution = java, -cp, {classPath},  {entryTags}, {args}
Comp734.execution = java, -cp, {oePath}, {entryTag}, {args}
Comp734Inc.execution = java, -cp, {classPath}, {entryTag}, {args}
#Comp401f15.execution = java, -cp, {oePath}, {entryPoint}, {args}

#Comp734Multi.execution = java, -cp, {classPath}, {entryTag}, {args}


#c suffix is compiler and host dependent
language.C.obj = obj
# syntax of language specification
default.language = Java
Comp411.language = C
Comp411Interp.language = C
Comp734.Assignment1.processTeams = RegistryBasedDistributedProgram
Comp734Inc.Assignment1.processTeams = RegistryBasedDistributedProgram
default.RegistryBasedDistributedProgram = Registry, Server, Client
default.DistributedProgram = Server, Client
# Need to keep these names consistent with constants in DistributedTags such as SERVER, CLIENT, REGISTRY, CLIENT1, ...
default.Registry.entryTag = Registry
default.Server.entryTag = Server
default.Client.entryTag = Client
default.Registry.entryTags = Registry
default.Server.entryTags = Server
default.Client.entryTags = Client
default.sleepTime = 3000
default.Registry.sleepTime = 1000
default.RegistryBasedDistributedProgram.terminating = Client
default.DistributedProgram.terminating = Client

Comp790Colab.Assignment1.processTeams = RegistryBasedAliceBob
Comp790ColabInc.Assignment1.processTeams = RegistryBasedAliceBob
default.RegistryBasedAliceBob = Registry, Server, Alice, Bob
default.RegistryBasedAliceBob.terminating = Alice, Bob
Comp790Colab.Assignment1.Alice.entryTags = Alice
Comp790Colab.Assignment1.Bob.entryTags = Bob
Comp790ColabInc.Assignment1.Alice.entryTags = Alice
Comp790ColabInc.Assignment1.Bob.entryTags = Bob


#Comp790Colab.Assignment1.execution.processTeams = AliceAndBob, AliceBobAndCathy
default.AliceBobAndCathy = Server, Alice, Bob, Cathy
default.AliceAndBob = Server, Alice, Bob
default.Alice.entryTags = Alice
default.Bob.entryTags = Bob
default.Cathy.entryTags = Cathy
default.AliceBobAndCathy.terminating = Alice, Bob, Cathy

Comp790Colab.processTeams =  AliceBobAndCathy
Comp790Colab.Example1.Alice.entryTags = Alice, Instant\ Messaging
Comp790Colab.Example1.Bob.entryTags = Bob, Instant\ Messaging
Comp790Colab.Example1.Cathy.entryTags = Cathy, Instant\ Messaging
Comp790Colab.Example1.Server.entryTags = Server, Instant\ Messaging

Comp790ColabInc.processTeams =  AliceBobAndCathy
Comp790ColabInc.Example1.Alice.entryTags = Alice, Instant\ Messaging
Comp790ColabInc.Example1.Bob.entryTags = Bob, Instant\ Messaging
Comp790ColabInc.Example1.Cathy.entryTags = Cathy, Instant\ Messaging
Comp790ColabInc.Example1.Server.entryTags = Server, Instant\ Messaging

default.trace = false
#for this course teh tester relies on traces being generated during execution
Comp790ColabInc.example1.trace = true

#Comp790Colab.Assignment1.AliceBobAndCathy = Server, Alice, Bob, Cathy

#Comp790Colab.entryPoint = gradingTools.comp790Colab.IMClientLauncher
#Comp790Colab.Server.entryPoint = gradingTools.comp790Colab.IMServerLauncher
#Comp790Colab.entryTag = IMClient
#Comp790Colab.Server.entryTag = Server
#Comp790Colab.Server.sleepTime = 5000 
#Comp790Colab.sleepTime = 2000
#Comp790Colab.Alice.args = Alice
#Comp790Colab.Bob.args = Bob
#Comp790Colab.Cathy.args = Cathy
#Comp790Colab.Cathy.startTag = AliceInput, BobInput

 


# You can specify which grading controller you want to use
# The options are "GradingManager" (the 'framework' package) or "SakaiProjectDatabase" (the 'grader' package)
#grader.controller = AGUIGradingManager
#grader.controller = AHeadlessGradingManager
grader.controller = SakaiProjectDatabase

# This is the path to the download folder for headless grading.
grader.headless.path = ./Test Data/Data

# This is the onyen range for projects to grade.
grader.headless.start = vitkus
grader.headless.end = vitkus

# You can specify which settings user interface you want to use for the SakaiProjectDatabase controller
# The options are "intellij" ( intellij UI from the 'framework' package) or "oe" (the OE UI from the 'grader' package)
#grader.settings = intellij
grader.settings = oe

#Each module has problems whose suffixes have identifies

modules = Comp110f14, Comp110f14Lab, Comp110, Comp401, Comp411, Comp734, Comp110Inc, Comp734Inc, Comp110Interp, Comp411Interp, Comp110s15, Comp110f15, Comp411Interp, Comp790-063-F14, Comp110File
#module problems are names prefix1, prefix2, ... prefix<int>, with default of Assignment
default.problems.prefix = Assignment
Comp401Recitations.problems.prefix = Recitation
Comp110f14Lab.problems.prefix = Lab



# what action to take on the stepper when a student project is visited by the setter
default.visitActions = autoGrade
#Comp110.visitActions = autoGrade
Comp401.Assignment5.visitActions = autoRun, autoGrade, loadClasses
Comp401.Assignment11.visitActions = autoRun
Comp411.visitActions = autoGrade
Comp411Interp.visitActions = autoGrade

default.loadClasses = true
Comp411.loadClasses = false 
Comp411Interp.loadClasses = false

default.compileMissingObjectCode = true
Comp411.compileMissingObjectCode = true
#we cannot compile incerementally modules with multiple files
default.precompileMissingObjectCode = false
Comp734.precompileMissingObjectCode = true
Comp734Inc.precompileMissingObjectCode = true
#Comp734Multi.precompileMissingObjectCode = true


default.forceCompile = false
default.checkStyle = false
default.checkStyleFile = checks.xml
#Comp110.checkStyle = true
#Comp411.forceCompile = false
Comp411Interp.forceCompile = true
Comp411.forceCompile = false

default.privacy = false
Comp401.privacy = true

default.unzipFiles = true

default.useExecutor = false
executor = D:/dewan_backup/Java/Grader/executor



# You can specify how you want the scores saved. You can choose any number of methods.
#   feedback-txt :  This saves a text file in the students' feedback folder
#   feedback-json : This saves a json file in the students' feedback folder
#   feedback :      Equivalent to "feedback-txt + feedback-json"
#   local-txt :     This saves a text file in a local log folder
#   local-json :    This saves a json file in the local log folder
#   local :         Equivalent to "local-txt + local-json"
#   spreadsheet :   This saves all the scores in a spreadsheet
#
# Combine methods with the plus '+' character. Here are some examples:
#   grader.controller.logger = csv
#   grader.controller.logger = feedback-txt + feedback-json
#   grader.controller.logger = local+feedback

#grader.logger = feedback + spreadsheet + csv
#lazy coding means feedback should be the last step so that isSaved works correctly
#grader.logger = spreadsheet + csv + feedback
#josh's spreadsheet or csv logger seems to add blank lines
grader.logger = csv + feedback



# For the spreadsheet, you can specify the location and name of the file.
# If you want to include the project name in the path, use {projectName}.
# The extension should be .xlsx (Excel spreadsheet)
#
# Example:
#   /tmp/log/{projectName}/grades.xlsx
# You can also specify a local path:
#   ./grades.xlsx

#grader.logger.spreadsheetFilename = ./log/{projectName}/grades.xlsx
grader.logger.spreadsheetFilename = ./log/{moduleName}/{problemName}/grades.xlsx



# Grader data folder name
grader.defaultAssignmentsDataFolderName = ./log/AssignmentsData/{moduleName}

grader.logger.interactionLogDirectory = ./log/AssignmentsData/interactionLogs


#settings file
grader.settings = .gradersettings
#dynamic configuration, replaces grader settings
grader.dynamicConfiguration = config/dynamicconfig.properties

# If you are using SakaiProjectDatabase, then there are further customizations
# Set to true if you want to use the GUI from GraderManager
grader.controller.useFrameworkGUI = false

#to be overridden in dynamicconfig based on your system
Word.path = "C:/Program Files/Microsoft Office/Office14/WINWORD"
#Word.path = "C:/Program Files (x86)/Microsoft Office/Office15/WINWORD"

#CCompiler.path = "C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/bin/cl.exe"
#CCompiler.path = "C:/Program Files/Microsoft Visual Studio 10.0/VC/bin/cl.exe"
CCompiler.path = "cl"



# =====  Test Case Configuration  =====
# The following configurations are used for the test cases.
# Note that all paths need to be absolute.

# This is the path so some "Bulk download" folder
test.exampleSakai.path = ./Test Data/Example Bulk
test.exampleSakai.projectName = project

# This is the path to and info of an on-time submitted project
# This project must have at least one class tagged
test.exampleSakai.example1.path = ./Test Data/Example Bulk/Sakai\\, Project(skproject)
test.exampleSakai.example1.onyen = skproject
test.exampleSakai.example1.userId = Sakai\\, Project(skproject)
test.exampleSakai.example1.project = ./Test Data/Example Bulk/Sakai\\, Project(skproject)/Submission attachment(s)/project
test.exampleSakai.example1.build = ./Test Data/Example Bulk/Sakai\\, Project(skproject)/Submission attachment(s)/project/bin
test.exampleSakai.example1.source = ./Test Data/Example Bulk/Sakai\\, Project(skproject)/Submission attachment(s)/project/src
test.exampleSakai.example1.tag = Printer
test.exampleSakai.example1.simpleName = SimplePrinter
test.exampleSakai.example1.canonicalName = main.ReversePrinter


# This is the path to and info of a non-submitted project
test.exampleSakai.example2.path = ./Test Data/Example Bulk/Submission\\, None(nosub)
test.exampleSakai.example2.onyen = nosub

test.exampleSakai.example2.userId = Submission\\, None(nosub)
